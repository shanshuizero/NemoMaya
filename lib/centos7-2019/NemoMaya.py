# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NemoMaya')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NemoMaya')
    _NemoMaya = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NemoMaya', [dirname(__file__)])
        except ImportError:
            import _NemoMaya
            return _NemoMaya
        try:
            _mod = imp.load_module('_NemoMaya', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NemoMaya = swig_import_helper()
    del swig_import_helper
else:
    import _NemoMaya
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NemoMaya.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _NemoMaya.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NemoMaya.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NemoMaya.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NemoMaya.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NemoMaya.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NemoMaya.SwigPyIterator_copy(self)

    def next(self):
        return _NemoMaya.SwigPyIterator_next(self)

    def __next__(self):
        return _NemoMaya.SwigPyIterator___next__(self)

    def previous(self):
        return _NemoMaya.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NemoMaya.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NemoMaya.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NemoMaya.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NemoMaya.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NemoMaya.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NemoMaya.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NemoMaya.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _NemoMaya.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NemoMaya.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NemoMaya.StrVector___nonzero__(self)

    def __bool__(self):
        return _NemoMaya.StrVector___bool__(self)

    def __len__(self):
        return _NemoMaya.StrVector___len__(self)

    def __getslice__(self, i, j):
        return _NemoMaya.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NemoMaya.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NemoMaya.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NemoMaya.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NemoMaya.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NemoMaya.StrVector___setitem__(self, *args)

    def pop(self):
        return _NemoMaya.StrVector_pop(self)

    def append(self, x):
        return _NemoMaya.StrVector_append(self, x)

    def empty(self):
        return _NemoMaya.StrVector_empty(self)

    def size(self):
        return _NemoMaya.StrVector_size(self)

    def swap(self, v):
        return _NemoMaya.StrVector_swap(self, v)

    def begin(self):
        return _NemoMaya.StrVector_begin(self)

    def end(self):
        return _NemoMaya.StrVector_end(self)

    def rbegin(self):
        return _NemoMaya.StrVector_rbegin(self)

    def rend(self):
        return _NemoMaya.StrVector_rend(self)

    def clear(self):
        return _NemoMaya.StrVector_clear(self)

    def get_allocator(self):
        return _NemoMaya.StrVector_get_allocator(self)

    def pop_back(self):
        return _NemoMaya.StrVector_pop_back(self)

    def erase(self, *args):
        return _NemoMaya.StrVector_erase(self, *args)

    def __init__(self, *args):
        this = _NemoMaya.new_StrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NemoMaya.StrVector_push_back(self, x)

    def front(self):
        return _NemoMaya.StrVector_front(self)

    def back(self):
        return _NemoMaya.StrVector_back(self)

    def assign(self, n, x):
        return _NemoMaya.StrVector_assign(self, n, x)

    def resize(self, *args):
        return _NemoMaya.StrVector_resize(self, *args)

    def insert(self, *args):
        return _NemoMaya.StrVector_insert(self, *args)

    def reserve(self, n):
        return _NemoMaya.StrVector_reserve(self, n)

    def capacity(self):
        return _NemoMaya.StrVector_capacity(self)
    __swig_destroy__ = _NemoMaya.delete_StrVector
    __del__ = lambda self: None
StrVector_swigregister = _NemoMaya.StrVector_swigregister
StrVector_swigregister(StrVector)

class vec3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3, name)
    __repr__ = _swig_repr

    def __init__(self, x, y, z):
        this = _NemoMaya.new_vec3(x, y, z)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NemoMaya.delete_vec3
    __del__ = lambda self: None
vec3_swigregister = _NemoMaya.vec3_swigregister
vec3_swigregister(vec3)

class Parser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parser, name)
    __repr__ = _swig_repr

    def append_module_path(self, path):
        return _NemoMaya.Parser_append_module_path(self, path)

    def init(self, dir, debug):
        return _NemoMaya.Parser_init(self, dir, debug)

    def set_inputs(self, inputs):
        return _NemoMaya.Parser_set_inputs(self, inputs)

    def parse(self, output):
        return _NemoMaya.Parser_parse(self, output)

    def parse_shape(self, outputShape, outputVisibility):
        return _NemoMaya.Parser_parse_shape(self, outputShape, outputVisibility)

    def clean(self):
        return _NemoMaya.Parser_clean(self)

    def dump_graph(self, path):
        return _NemoMaya.Parser_dump_graph(self, path)

    def dump_resource(self, path):
        return _NemoMaya.Parser_dump_resource(self, path)

    def dump_debug(self, path):
        return _NemoMaya.Parser_dump_debug(self, path)
    State_Dynamic = _NemoMaya.Parser_State_Dynamic
    State_Static = _NemoMaya.Parser_State_Static
    State_Default = _NemoMaya.Parser_State_Default

    def add_custom_parameter(self, parameter):
        return _NemoMaya.Parser_add_custom_parameter(self, parameter)

    def __init__(self):
        this = _NemoMaya.new_Parser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NemoMaya.delete_Parser
    __del__ = lambda self: None
Parser_swigregister = _NemoMaya.Parser_swigregister
Parser_swigregister(Parser)

class CustomParameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomParameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NemoMaya.delete_CustomParameter
    __del__ = lambda self: None
    __swig_setmethods__["index_mask"] = _NemoMaya.CustomParameter_index_mask_set
    __swig_getmethods__["index_mask"] = _NemoMaya.CustomParameter_index_mask_get
    if _newclass:
        index_mask = _swig_property(_NemoMaya.CustomParameter_index_mask_get, _NemoMaya.CustomParameter_index_mask_set)
    __swig_setmethods__["is_stack"] = _NemoMaya.CustomParameter_is_stack_set
    __swig_getmethods__["is_stack"] = _NemoMaya.CustomParameter_is_stack_get
    if _newclass:
        is_stack = _swig_property(_NemoMaya.CustomParameter_is_stack_get, _NemoMaya.CustomParameter_is_stack_set)
    __swig_setmethods__["typeH"] = _NemoMaya.CustomParameter_typeH_set
    __swig_getmethods__["typeH"] = _NemoMaya.CustomParameter_typeH_get
    if _newclass:
        typeH = _swig_property(_NemoMaya.CustomParameter_typeH_get, _NemoMaya.CustomParameter_typeH_set)
    __swig_setmethods__["method_name"] = _NemoMaya.CustomParameter_method_name_set
    __swig_getmethods__["method_name"] = _NemoMaya.CustomParameter_method_name_get
    if _newclass:
        method_name = _swig_property(_NemoMaya.CustomParameter_method_name_get, _NemoMaya.CustomParameter_method_name_set)

    def process(self, plug, graph, resource, port, clientData):
        return _NemoMaya.CustomParameter_process(self, plug, graph, resource, port, clientData)
CustomParameter_swigregister = _NemoMaya.CustomParameter_swigregister
CustomParameter_swigregister(CustomParameter)

class IntCustomParameter(CustomParameter):
    __swig_setmethods__ = {}
    for _s in [CustomParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCustomParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CustomParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntCustomParameter, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IntCustomParameter:
            _self = None
        else:
            _self = self
        this = _NemoMaya.new_IntCustomParameter(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NemoMaya.delete_IntCustomParameter
    __del__ = lambda self: None

    def get(self, arg0, arg1):
        return _NemoMaya.IntCustomParameter_get(self, arg0, arg1)
    def __disown__(self):
        self.this.disown()
        _NemoMaya.disown_IntCustomParameter(self)
        return weakref_proxy(self)
IntCustomParameter_swigregister = _NemoMaya.IntCustomParameter_swigregister
IntCustomParameter_swigregister(IntCustomParameter)

class Vec3CustomParameter(CustomParameter):
    __swig_setmethods__ = {}
    for _s in [CustomParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3CustomParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CustomParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3CustomParameter, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Vec3CustomParameter:
            _self = None
        else:
            _self = self
        this = _NemoMaya.new_Vec3CustomParameter(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NemoMaya.delete_Vec3CustomParameter
    __del__ = lambda self: None

    def get(self, arg0, arg1):
        return _NemoMaya.Vec3CustomParameter_get(self, arg0, arg1)
    def __disown__(self):
        self.this.disown()
        _NemoMaya.disown_Vec3CustomParameter(self)
        return weakref_proxy(self)
Vec3CustomParameter_swigregister = _NemoMaya.Vec3CustomParameter_swigregister
Vec3CustomParameter_swigregister(Vec3CustomParameter)

class BinaryCustomParameter(CustomParameter):
    __swig_setmethods__ = {}
    for _s in [CustomParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryCustomParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CustomParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryCustomParameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NemoMaya.delete_BinaryCustomParameter
    __del__ = lambda self: None

    def get(self, arg2, arg3, arg4):
        return _NemoMaya.BinaryCustomParameter_get(self, arg2, arg3, arg4)

    def process(self, plug, graph, resource, port, clientData):
        return _NemoMaya.BinaryCustomParameter_process(self, plug, graph, resource, port, clientData)
BinaryCustomParameter_swigregister = _NemoMaya.BinaryCustomParameter_swigregister
BinaryCustomParameter_swigregister(BinaryCustomParameter)

class BinaryListCustomParameter(CustomParameter):
    __swig_setmethods__ = {}
    for _s in [CustomParameter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryListCustomParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [CustomParameter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryListCustomParameter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NemoMaya.delete_BinaryListCustomParameter
    __del__ = lambda self: None

    def get(self, arg2, arg3, arg4):
        return _NemoMaya.BinaryListCustomParameter_get(self, arg2, arg3, arg4)

    def process(self, plug, graph, resource, port, clientData):
        return _NemoMaya.BinaryListCustomParameter_process(self, plug, graph, resource, port, clientData)
BinaryListCustomParameter_swigregister = _NemoMaya.BinaryListCustomParameter_swigregister
BinaryListCustomParameter_swigregister(BinaryListCustomParameter)


def add_custom_parameters_for_builtin(arg1, arg2):
    return _NemoMaya.add_custom_parameters_for_builtin(arg1, arg2)
add_custom_parameters_for_builtin = _NemoMaya.add_custom_parameters_for_builtin
# This file is compatible with both classic and new-style classes.


